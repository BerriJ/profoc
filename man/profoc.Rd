% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{profoc}
\alias{profoc}
\title{Probabilistic Forecast Combination - ProFoC}
\usage{
profoc(y, experts, tau, loss_function = "quantile",
loss_parameter = 1, ex_post_smooth = FALSE, ex_post_fs = FALSE,
lambda = -Inf, method = "boa", method_var = "A", forget_regret = 0,
forget_performance = 0, fixed_share = 0, gamma = 1, ndiff = 1, deg = 3,
knot_distance = 0.025, knot_distance_power = 1,
gradient = TRUE, loss_array = NULL, regret_array = NULL,
trace = TRUE, init_weights = NULL, lead_time = 0, allow_quantile_crossing = FALSE)
}
\arguments{
\item{y}{A numeric vector of realizations.}

\item{experts}{A an array of predictions with dimension
(Observations, Quantiles, Experts).}

\item{tau}{A numeric vector of probabilities.
corresponding to the columns of experts.}

\item{loss_function}{Either "quantile", "expectile" or "percentage".}

\item{loss_parameter}{Optional parameter scaling the power of the loss function.}

\item{ex_post_smooth}{Determines if smoothing is during or after
online-learning. If true, contemporary weights are not affected
but output weights are. If false (default) smoothed weights are
also by the algorithm.}

\item{ex_post_fs}{Analogous to ex_post_smooth: shall a fixed-share
be added during (FALSE) or after online-learning (TRUE).}

\item{lambda}{Penalization parameter used in the smoothing Step.
-Inf causes the smoothing step to be skipped (default).}

\item{method}{One of "boa", "ml_poly" or "ewa".}

\item{method_var}{Allows to calculate slight variations of the BOA
algorithm}

\item{forget_regret}{Share of past regret not to be considered, resp. to be
forgotten in every iteration of the algorithm. Defaults to 0.}

\item{forget_performance}{Share of past performance not to be considered, resp. to be
forgotten in every iteration of the algorithm when choosing the parameter combination. Defaults to 0.}

\item{fixed_share}{Amount of fixed share to be added to the weights.
Defaults to 0. 1 leads to uniform weights.}

\item{gamma}{Scaling parameter for the learning rate.}

\item{ndiff}{Degree of the differencing operator in the smoothing equation. 1 (default) leads to shrikage towards a constant. Can also be 2 or any value in between. If a value in between is used, a weighted sum of the first and second differentiation matrix is calculated.}

\item{deg}{Degree of the B-Spine basis functions.}

\item{knot_distance}{determines the distance of the knots. Defaults to 0.025 which corrsponds to the grid steps when knot_distance_power = 1 (the default).}

\item{knot_distance_power}{Parameter which defining the symetrie of the b-spline basis. Defaults to 1 which corresponds to the equidistant case. Values less than 1 create more knots in the center while values above 1 concentrate more knots in the tails.}

\item{gradient}{Determines if a linearized version of the loss is used.}

\item{loss_array}{User specified loss array. If specified, the loss will not be calculated by profoc.}

\item{regret_array}{User specified regret array. If specifiec, the regret will not be calculated by profoc.}

\item{trace}{If a progessbar shall be printed. Defaults to TRUE.}

\item{init_weights}{Matrix of dimension Kx1 or KxP used as starting weights. Kx1 represents the constant solution with equal weights over all P whereas specifiying a KxP matrix allows different starting weights for each P.}

\item{lead_time}{offset for expert forecasts. Defaults to 0, which means that
experts forecast t+1 at t. Setting this to h means experts predictions refer
to t+1+h at time t. The weight updates delay accordingly.}

\item{allow_quantile_crossing}{Shall quantile crossing be allowed? Defaults to false which means that predictions are sorted in ascending order.}
}
\value{
Profoc can tune various parameters automatically based on
the past loss. For this, lambda, forget, fixed_share, gamma, ndiff,
deg and knot_distance can be specified as numeric vectors containing
parameters to consider. Profoc will automatically try all possible
combinations of values provide.
}
\description{
Returns predictions and weights calculated by online-learning algorithms
using CRPS Learning. By default, the weights are calculated by
gradient based bernstein online aggregation (BOAG).
}
